version: 2.1
orbs:
  slack: circleci/slack@4.10.1

commands:
  install_awscli:
    description: install aws cli
    steps:
      - run:
          name: install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_nodejs:
    description: install node js
    steps:
      - run:
          name: install node js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  install_ansible:
    description: Install ansible
    steps:
      - run:
          name: install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl  --insecure "https://kvdb.io/MvCLV4RLpmfKEv94sj8D5H/migration_<<parameters.workflow_id>>")
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - notify_slack_error
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - notify_slack_error
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front end test
          command: |
            cd frontend
            npm install
            npm run test
      - notify_slack_error

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - notify_slack_error

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Audit front-end app
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["backend-build"]
      # Your job code here
      - run:
          name: Audit backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cat inventory.txt
            cd .circleci/ansible
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ./.circleci/ansible
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["d4:34:83:c7:b2:51:d4:ba:6d:d3:84:ad:10:97:c2:0c"]
      - run:
          name: install utility
          command: |
            yum install -y tar gzip unzip wget make openssh-server openssh-clients
      - run:
          name: install python
          command: |
            yum install python37 -y
      - attach_workspace:
          at: ./.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            python3 -m pip install ansible
      - run:
          name: Configure server
          command: |
            export PATH="/Users/shantanu/Library/Python/3.7/bin:$PATH"
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo 'success '
              curl  --insecure https://kvdb.io/MvCLV4RLpmfKEv94sj8D5H/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo 'migration already done before'
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - add_ssh_keys:
          fingerprints: ["d4:34:83:c7:b2:51:d4:ba:6d:d3:84:ad:10:97:c2:0c"]
      - checkout
      - install_awscli
      - install_nodejs
      - install_ansible
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build   
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d4:34:83:c7:b2:51:d4:ba:6d:d3:84:ad:10:97:c2:0c"]
      - install_nodejs
      - install_awscli
      - install_ansible  
      - run:
          name: install utility
          command: |
            sudo apt update
            sudo apt install -y openssh-server
            sudo apt-get install openssh-client
      - attach_workspace:
          at: ./.circleci/ansible
      - run:
          name: Deploy backend
          command: |
            export PATH="/Users/shantanu/Library/Python/3.7/bin:$PATH"
            cd backend
            npm i
            npm run build
            cd ..

            # Zip the directory
            cd .circleci/ansible
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            echo "Contents  of the inventory.txt file is -------"
            cd ..
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_nodejs
      - install_awscli
      - run:
          name: Get backend url
          command: |
           BACKEND_IP=$(aws ec2 describe-instances \
           --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --query 'Reservations[*].Instances[*].PublicIpAddress' \
           --output text)
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"                   
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: save old workflow id to kvdb
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query \
            "Exports[?Name==\`WorkflowId\`].Value" \
            --no-paginate --output text)
            echo "Old workflow Id : $OLD_WORKFLOW_ID"
            if [ -z "$variable" ];
              then echo "$OLD_WORKFLOW_ID is null";
            else 
              echo $OLD_WORKFLOW_ID;
              curl  --insecure https://kvdb.io/MvCLV4RLpmfKEv94sj8D5H/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d ${OLD_WORKFLOW_ID}
            fi
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --stack-name InitialStack --tags project=udapeople
      - destroy-environment
      - revert-migrations

  cleanup:
      docker:
        # Docker image here
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export STACKS=($(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              echo Stack names: "${STACKS[@]}"
              export oldWorkFlowId=$(curl --insecure https://kvdb.io/MvCLV4RLpmfKEv94sj8D5H/old_workflow_id)
              echo old workflow id : $oldWorkFlowId
        - run:
            name: Remove old stacks and files
            command: |
              export oldWorkFlowId=$(curl --insecure https://kvdb.io/MvCLV4RLpmfKEv94sj8D5H/old_workflow_id)
              echo old workflow id : $oldWorkFlowId
              if [[ "${STACKS[@]}" =~ "${oldWorkFlowId}" ]]
              then
                aws s3 rm "s3://udapeople-${oldWorkFlowId}" --recursive
                aws cloudformation delete-stack --stack-name udapeople-frontend-${oldWorkFlowId}
                aws cloudformation delete-stack --stack-name udapeople-backend-${oldWorkFlowId}
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
